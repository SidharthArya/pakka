#!/usr/bin/env bash
# what the hell there's no comments???
# pakka - simple aur helper
SELF=pakka
SELF_PROG=$0
SELF_VER=1.2

CONFIGDIR=${CONFIGDIR:-$HOME/.config/pakka}
if [ ! -f "$CONFIGDIR/config" ]; then
	echo "$SELF: Config file doesn't seems to exists, so using the defaults"
fi
CACHEDIR="${HOME}/.pakka_cache" # not all people write config files, this is the default CACHEDIR
if [ -f "$CONFIGDIR/config" ]; then
	. "$CONFIGDIR/config"
fi
if [ ! -f "/usr/bin/package-query" ]; then
	echo "$SELF: Cannot find package-query on your system!"
	echo "$SELF: Please install package-query and rerun the script"
	exit 1
fi

mkdir -p "$CACHEDIR/archive"
mkdir -p "$CACHEDIR/packaging"

die()
{
    echo "[FATAL ERROR] $*"
    exit 1
}

msg_info()
{
	echo "[INFO] $*"
}

msg_error()
{
	echo "[ERROR] $*"
	exit 1
}

msg_warn()
{
	echo "[WARNING] $*"
}

exitm() {
    exit "$1"
}

install_aur_pkg() {
    i="$1"
    msg_info "Building $i"
    SRCDIR=$CACHEDIR/packaging/$i
    if [ ! -f "$CACHEDIR/archive/$i.tar.gz" ]; then
        curl -L -o "$CACHEDIR/archive/$i.tar.gz" "https://aur.archlinux.org/cgit/aur.git/snapshot/$i.tar.gz" || msg_error "Couldn't download PKGBUILD"
    fi
    tar xzf "$CACHEDIR/archive/$i.tar.gz" -C "$CACHEDIR/packaging" || msg_error "Couldn't extact file"
    cd "$SRCDIR"
    echo -n "$SELF: Wanna see PKGBUILD? [y/n] "
    read q1
    if [ "$q1" == "y" ]; then
    	less PKGBUILD
    fi
    echo -n "$SELF: Start building ${i}? [y/n] "
    read prompt
    if [ ! "$prompt" == "y" ]; then
	rm -rf "$CACHEDIR/packaging/$i"
	rm -rf "$CACHEDIR/archive/$i.tar.gz"
    	msg_error Interrupted!
    fi
    if [ -d "$CONFIGDIR/overrides/$i/srcpatch" ];
    then
        msg_info "Patching"
        for j in $(ls $CONFIGDIR/overrides/$i/srcpatch/)
        do
	    patch -p1 < "$CONFIGDIR/overrides/$i/srcpatch/$j"
	        msg_info "Patched $j !" || {
                    echo -n "$SELF: Failed to patch. Ignore it and continue? [y/n] "
					read prompt2
                    if [ ! "$prompt2" == "y" ]; then
						msg_error Interrupted
					fi
                }
        done
    fi

    
    if [ -d $"CONFIGDIR/overrides/$i/srccopy" ];
    then
	cp -rv "$CONFIGDIR/overrides/$i/srccopy/*" "$SRCDIR" # i don't know why everything is doing so useless code parts. every path sould be double quoted
    fi
    makepkg -s -o || msg_error "Couldn't execute makepkg"
    if [ -d "$CONFIGDIR/overrides/$i/copy" ];
    then
	cp -rv "$CONFIGDIR/overrides/$i/copy/*" "$SRCDIR/src" # again...
    fi
    cd src/
    if [ -d "$CONFIGDIR/overrides/$i/patch" ];
    then
        msg_info "Patching"
        for j in $(ls $CONFIGDIR/overrides/$i/patch/) # agaaaaain
        do
	    patch -p1 < "$CONFIGDIR/overrides/$i/patch/$j"
	        msg_info "Patched $j !" || {
                    read -rp "$SELF: Failed Patch $j! Do you want to continue without it? [y/n] " prompt3
                    if [ ! "$prompt3" == "y" ]; then
						msg_error Interrupted!
					fi
                }
        done
    fi
    cd ..
    makepkg -sci || {
	read -rp "$SELF: Do you want to disable verify checks? [y/n] " prompt
	if [[ $prompt == "y" ]];
	then
	    makepkg -sci --skipinteg
	fi
    }
}
install_aur_pkg_nc() {
    i="$1"
    msg_info "Building $i"
    SRCDIR=$CACHEDIR/packaging/$i
    if [ ! -f "$CACHEDIR/archive/$i.tar.gz" ]; then
        curl -L -o "$CACHEDIR/archive/$i.tar.gz" "https://aur.archlinux.org/cgit/aur.git/snapshot/$i.tar.gz" || msg_error "Couldn't download PKGBUILD"
    fi
    tar xzf "$CACHEDIR/archive/$i.tar.gz" -C "$CACHEDIR/packaging" || msg_error "Couldn't extact file"
    cd "$SRCDIR"
    if [ -d "$CONFIGDIR/overrides/$i/srcpatch" ];
    then
        msg_info "Patching"
        for j in $(ls $CONFIGDIR/overrides/$i/srcpatch/)
        do
	    patch -p1 < "$CONFIGDIR/overrides/$i/srcpatch/$j"
	        msg_info "Patched $j !" || {
                    msg_error "Failed to patch ${j}!"
                }
        done
    fi

    
    if [ -d $"CONFIGDIR/overrides/$i/srccopy" ];
    then
	cp -rv "$CONFIGDIR/overrides/$i/srccopy/*" "$SRCDIR" # i don't know why everything is doing so useless code parts. every path sould be double quoted
    fi
    makepkg -s -o --noconfirm || msg_error "Couldn't execute makepkg"
    if [ -d "$CONFIGDIR/overrides/$i/copy" ];
    then
	cp -rv "$CONFIGDIR/overrides/$i/copy/*" "$SRCDIR/src" # again...
    fi
    cd src/
    if [ -d "$CONFIGDIR/overrides/$i/patch" ];
    then
        msg_info "Patching"
        for j in $(ls $CONFIGDIR/overrides/$i/patch/) # agaaaaain
        do
	    patch -p1 < "$CONFIGDIR/overrides/$i/patch/$j"
	        msg_info "Patched $j !" || {
                    msg_error "Failed to patch ${j}!"
                }
        done
    fi
    cd ..
    makepkg -sci --noconfirm || {
	read -rp "$SELF: Do you want to disable verify checks? [y/n] " prompt
	if [[ $prompt == "y" ]];
	then
	    makepkg -sci --skipinteg --noconfirm
	fi
    }
}

case "$1" in
	-A)
		pkg_aur_list="$(echo $* | sed 's/-A //')"
		if [ "$pkg_aur_list" == "" ]; then
			msg_error Specify packages to install!
		fi
		for listpkg in $pkg_aur_list; do
			if [ "$(/usr/bin/package-query -A -Q --insecure -i $listpkg)" == "" ]; then
				msg_error "Package $listpkg doesn't exists in AUR!"
			fi
			install_aur_pkg $listpkg # install package
			rm -rf "$CACHEDIR/packaging/$listpkg"
			rm -rf "$CACHEDIR/archive/$listpkg.tar.gz"
		done
		exit 0
		;;
	-An)
		pkg_aur_list="$(echo $* | sed 's/-An //')"
		if [ "$pkg_aur_list" == "" ]; then
			msg_error Specify packages to install!
		fi
		for listpkg in $pkg_aur_list; do
			if [ "$(/usr/bin/package-query -A -Q --insecure -i $listpkg)" == "" ]; then
				msg_error "Package $listpkg doesn't exists in AUR!"
			fi
			install_aur_pkg_nc $listpkg # install package
			rm -rf "$CACHEDIR/packaging/$listpkg"
			rm -rf "$CACHEDIR/archive/$listpkg.tar.gz"
		done
		exit 0
		;;
	-C)
		msg_info "Removing Cache Dir"
		rm -rf "$CACHEDIR"
		exit 0
		;;
	-Ss)
		search_string="$(echo $* | sed 's/-Ss //')"
		/usr/bin/package-query -A -Q --insecure -s "$search_string"
		/usr/bin/pacman -Ss "$search_string"
		exit 0
		;;
	-G)
	    get_pkg_list="$(echo $* | sed 's/-G //')"
	    	for listpkg in $get_pkg_list; do
			if [ "$(/usr/bin/package-query -A -Q --insecure -i $listpkg)" == "" ]; then
				msg_error "Package $listpkg doesn't exists in AUR!"
			fi
			msg_info "Downloading package ${listpkg}'s PKGBUILD to current directory"
			curl -L -o ./$listpkg.PKGBUILD "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$listpkg" || die "Couldn't download file!"
			msg_info "AUR/$listpkg/PKGBUILD --> $(pwd)/$listpkg.PKGBUILD"
			exit 0
	    	done
		;;
	-V)
		msg_info "You're running $SELF version $SELF_VER"
		exit 0
		;;
	-P)
		if [ ! -d "$2" ]; then
			msg_error "This path doesn't exist"
		fi
		cd "$2"
		makepkg -s || die "makepkg returned error"
		exit 0
		;;
	-Pi)
		if [ ! -d "$2" ]; then
			msg_error "This path doesn't exist"
		fi
		cd "$2"
		makepkg -si || die "makepkg returned error"
		exit 0
		;;
	-Pn)
		if [ ! -d "$2" ]; then
			msg_error "This path doesn't exist"
		fi
		cd "$2"
		makepkg -s --noconfirm || die "makepkg returned error"
		exit 0
		;;
	-Pni)
		if [ ! -d "$2" ]; then
			msg_error "This path does't exist"
		fi
		cd "$2"
		makepkg -si --noconfirm || die "makepkg returned error"
		exit 0
		;;
	--help)
		msg_info "$SELF - fork of $SELF aur helper."
		msg_info "Usage: $SELF {OPTION} package1 package2..."
		msg_info "Options:"
		msg_info "-A          | build aur packages"
		msg_info "-An         | build aur packages, don't ask for anything"
		msg_info "-C          | clean cache"
		msg_info "-Ss         | search for packages in aur and repos"
		msg_info "-G          | get PKGBUILD of package"
		msg_info "-V          | display version of $SELF and exit"
		msg_info "-P          | build package from specified directory"
		msg_info "-Pi         | the same as previous, but installs after building"
		msg_info "-Pn         | the same as '-P', but doesn't asks for anything"
		msg_info "-Pni        | the same as previous, but installs after building"
		msg_info "--help      | show this help"
		msg_info "Any other arguments will be piped to pacman"
		msg_info "Visit projects website at http://codeberg.org/glowiak/pakka"
		exit 0
		;;
	"")
		msg_info "No arguments given. Type '$SELF --help' for help"
		exit 0
		;;
	*)
		sudo pacman $*
		exit 0
		;;
esac
