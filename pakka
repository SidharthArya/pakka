#!/usr/bin/env bash
# what the hell there's no comments???
# pakka - simple aur helper
set -eEu # what the hell is that?
set -o pipefail # another crappy useless command???
IFS=$'\n\t' # please remove those commands
SELF=pakka
SELF_PROG=$0

CONFIGDIR=${CONFIGDIR:-$HOME/.config/pakka}
# well, we need to tell the user, where config file doesn't exists
if [ ! -f "$CONFIGDIR/config" ]; then
	echo "$SELF: Cannot load config file. Exiting"
	exit 1
fi
. "$CONFIGDIR/config" # dot is much simplier than source and it's limited to bash and kornshell
# CWD=$(pwd) # this is't needed as after script will exit, shell will go back to dir where script was started

mkdir -p "$CACHEDIR/archive"
mkdir -p "$CACHEDIR/packaging"
mkdir -p "$CACHEDIR/packages"

msg_info()
{
	echo "[INFO] $*"
}

msg_error()
{
	echo "[ERROR] $*"
	exit 1
}

msg_warn()
{
	echo "[WARNING] $*"
}

exitm() {
    exit "$1"
}


install() {
    i="$1"
    msg_info "Building $i"
    SRCDIR=$CACHEDIR/packaging/$i
    if [ ! -f "$CACHEDIR/archive/$i.tar.gz" ]; then
        curl -L -o "$CACHEDIR/archive/$i.tar.gz" "https://aur.archlinux.org/cgit/aur.git/snapshot/$i.tar.gz"
    fi
    tar xzf "$CACHEDIR/archive/$i.tar.gz" -C "$CACHEDIR/packaging"
    cd "$SRCDIR"
    echo -n "$SELF: Wanna see PKGBUILD? [y/n] "
    read q1
    if [ "$q1" == "y" ]; then
    	less PKGBUILD
    fi
    echo -n "$SELF: Start building ${i}? [y/n] "
    read prompt
    if [ ! "$prompt" == "y" ]; then
    	msg_error Interrupted!
    fi
    if [ -d "$CONFIGDIR/overrides/$i/srcpatch" ];
    then
        msg_info "Patching"
        for j in "$(ls $CONFIGDIR/overrides/$i/srcpatch/)";
        do
	    patch -p1 < "$CONFIGDIR/overrides/$i/srcpatch/$j"
	        msg_info "Patched $j !" || {
                    echo -n "$SELF: Failed to patch. Ignore it and continue? [y/n] "
		    read prompt2
                    if [ ! "$prompt2" == "y" ]; then
		    	msg_error Interrupted
		    fi
                }
        done
    fi

    
    if [ -d $"CONFIGDIR/overrides/$i/srccopy" ];
    then
	cp -rv "$CONFIGDIR/overrides/$i/srccopy/*" "$SRCDIR" # i don't know why everything is doing so useless code parts. every path sould be double quoted
    fi
    makepkg -o
    if [ -d "$CONFIGDIR/overrides/$i/copy" ];
    then
	cp -rv "$CONFIGDIR/overrides/$i/copy/*" "$SRCDIR/src" # again...
    fi
    cd src/
    if [ -d "$CONFIGDIR/overrides/$i/patch" ];
    then
        msg_info "Patching"
        for j in "$(ls $CONFIGDIR/overrides/$i/patch/)" #; # agaaaaain
        do
	    patch < "$CONFIGDIR/overrides/$i/patch/$j" &&
	        msg_info "Patched $j !" || {
                    read -rp "Failed Patch $j! Do you want to continue without it? " prompt;
                    [[ $prompt == "n" ]] || [[ $prompt == "no" ]] && exitm 1
                }
        done
    fi
    cd ..
    makepkg -sci || {
	read -rp "$SELF: Do you want to disable verify checks? [y/n] " prompt
	if [[ $prompt == "y" ]];
	then
	    makepkg -sci --skipinteg;
	fi
    }
}

ARGS=$*
if [[ -z $ARGS ]]
then
    for i in $(cat "$CONFIGDIR/Packages");
    do
	install $i
    done
else
    for i in $ARGS;
    do
	install $i;
    done
fi
